[gd_scene load_steps=21 format=3 uid="uid://bq5jjl37pbqu5"]

[ext_resource type="Script" path="res://GlobalClasses/ActionsClasses/ActionProcessor.gd" id="1_ntvn1"]
[ext_resource type="Script" path="res://GlobalClasses/FieldObjectClasses/FieldObjectMap.gd" id="2_2rgc4"]
[ext_resource type="PackedScene" uid="uid://ckrguperorqkx" path="res://GameSources/ActionQueueUI.tscn" id="3_8vfj5"]
[ext_resource type="PackedScene" uid="uid://cilkpauagx4ek" path="res://GameSources/AbilityChoosingUI.tscn" id="3_skgp4"]
[ext_resource type="PackedScene" uid="uid://c0wftpahvt5f0" path="res://GameSources/ObjectControllingUI.tscn" id="4_ukry5"]

[sub_resource type="GDScript" id="GDScript_qfrmm"]
script/source = "extends Node2D


const OBJECT = preload(\"res://TestContent/LinearMoveObject.tscn\")


func _ready() -> void: 
	%FieldObjectMap.add_object(
		FieldObjectFactory.get_instance(OBJECT, Vector2i(5, 5), FieldObject.Sides.DEFENCE)
	)

	%FieldObjectMap.add_object(
		FieldObjectFactory.get_instance(OBJECT, Vector2i(7, 3), FieldObject.Sides.ATTACK)
	)
	
	var t = A.new()


class A:
	func d():
		print(\"ABOBA\")
"

[sub_resource type="GDScript" id="GDScript_rde56"]
script/source = "extends Node


signal new_object
signal new_ability


var object : FieldObject
var ability : String = \"\"

func choose(fo:FieldObject):
	if fo == object:
		return
	
	if object != null:
		if object.tree_exiting.is_connected(_unchoose_chosen):
			object.tree_exiting.disconnect(_unchoose_chosen)
	
	object = fo
	ability = \"\"
	
	object.tree_exiting.connect(_unchoose_chosen, CONNECT_ONE_SHOT)
	
	new_object.emit()
	new_ability.emit()


func choose_ability(ability_name:String):
	ability = ability_name
	new_ability.emit()


func get_apply_ability_action(to:Vector2i) -> Action:
	if not has_chosen():
		return EmptyAction.new()
	
	if not chosen_correct_ability():
		return EmptyAction.new()
	
	
	return %Abilities.abilities[ability].get_deferred_applying_action(object, to)


func has_chosen() -> bool:
	return object != null and is_instance_valid(object)


func chosen_correct_ability():
	return object.abilities_data.has(ability)


func unchoose():
	object.tree_exiting.disconnect(_unchoose_chosen)
	
	_unchoose_chosen()


func _unchoose_chosen():
	object = null
	ability = \"\"
	
	new_object.emit()
	new_ability.emit()
"

[sub_resource type="GDScript" id="GDScript_dgca5"]
script/source = "extends Node


var cell : Vector2i = Vector2i()
"

[sub_resource type="GDScript" id="GDScript_8cm6s"]
script/source = "extends Node


signal ability_started(ability_name:String, fo:FieldObject, target:Vector2i)
signal ability_completed(ability_name:String)


var abilities : Dictionary = {}


func _ready():
	abilities[LinearMoveAbility.NAME] = LinearMoveAbility.new()
	
	for i in abilities.values():
		i.ability_started.connect(func(fo, to): emit_signal(\"ability_started\", i.NAME, fo, to))
		i.ability_completed.connect(func(): emit_signal(\"ability_completed\", i.NAME))
"

[sub_resource type="GDScript" id="GDScript_wxxsl"]
script/source = "extends Node


var current_draw_rule : AbilityDrawRule

var _draw_rules : Dictionary = {} # name : FieldDrawRule


func _ready():
	for i in get_children():
		if i is AbilityDrawRule:
			_draw_rules[i.get_ability_name()] = i


func set_rule(ability_name:String, fo:FieldObject):
	var draw_rule = _draw_rules.get(ability_name)
	
	if draw_rule == null:
		clear_rule()
		return
	
	if draw_rule == current_draw_rule:
		return
	
	if current_draw_rule != null:
		clear_rule()
	
	current_draw_rule = draw_rule
	current_draw_rule.go_waiting_mode(fo)
	current_draw_rule.reparent(%GameField)
	current_draw_rule.owner = owner


func draw_applying(fo:FieldObject, to:Vector2i):
	if not has_active_rule():
		return
	
	current_draw_rule.go_applying_mode(fo, to)


func draw_waiting(fo:FieldObject):
	if not has_active_rule():
		return
	
	current_draw_rule.go_waiting_mode(fo)



func clear_rule():
	if current_draw_rule == null:
		return
	
	current_draw_rule.reparent(self)
	
	current_draw_rule.owner = owner
	current_draw_rule = null


func has_active_rule():
	return current_draw_rule != null
"

[sub_resource type="GDScript" id="GDScript_tat8k"]
script/source = "extends AbilityDrawRule


var _fo : FieldObject
var _obstacles : CellsArea
var _target : Vector2i

func _name():
	return LinearMoveAbility.NAME


func _enter_applying_mode(fo:FieldObject, to:Vector2i):
	_fo = fo
	_target = to


func _enter_waiting_mode(fo:FieldObject):
	_fo = fo
	_obstacles = %FieldObjectMap.get_solid_objects_cells_area()


func _draw_on_applying(field:GameField):
	field.fill_internal_hex(_target, Color(0, 1, 0, 0.2), 0.6)


func _draw_on_waiting(field:GameField):
	for i in field.hex_map.get_all_map_hexes():
		if HexPlane.get_diatance(i, _fo.position) <= _fo.abilities_data[LinearMoveAbility.NAME].move_remains:
			if (not _obstacles.has_cell(i)) and Vector2i(i) != _fo.position:
				field.fill_internal_hex(i, Color(0, 1, 0, 0.2), 0.6)

"

[sub_resource type="GDScript" id="GDScript_5k726"]
script/source = "extends GameField


func _process(delta):
	queue_redraw()
	
	for i in get_tree().get_nodes_in_group(\"FieldVisual2D\"):
		i.global_position = to_global(iso_hex_transformations.hex2pixel(i.field_position))


"

[sub_resource type="GDScript" id="GDScript_616kv"]
script/source = "extends FieldDrawRule


func _on_draw(field:GameField):
	for i in field.hex_map.get_all_map_hexes():
		field.draw_internal_hex(i, Color(1, 1, 1, 0.3), 0.9)
"

[sub_resource type="GDScript" id="GDScript_7mif4"]
script/source = "extends FieldDrawRule


func _on_draw(field:GameField):
	if field.hex_map.is_hex_in_map(%MouseCell.cell):
		field.encircle_hex(%MouseCell.cell, Color.WHITE)
"

[sub_resource type="GDScript" id="GDScript_m5a4j"]
script/source = "extends FieldDrawRule


@onready
var field_object_map : FieldObjectMap = %FieldObjectMap


func _on_draw(field:GameField):
	for i in field_object_map.get_all_objects():
		var color : Color
		if i.side == FieldObject.Sides.ATTACK:
			color = Color.RED
		else:
			color = Color.GREEN
		
		field.draw_internal_hex(i.position, color, 0.7)
"

[sub_resource type="GDScript" id="GDScript_pklfo"]
script/source = "extends FieldDrawRule



func _on_draw(field:GameField):
	if %Chosen.object != null:
		field.encircle_hex(%Chosen.object.position, Color.YELLOW)
"

[sub_resource type="GDScript" id="GDScript_fkqau"]
script/source = "extends Node


func _unhandled_input(event):
	if event is InputEventMouseMotion:
		%MouseCell.cell = %GameField.iso_hex_transformations.pixel2hex(
			%GameField.get_local_mouse_position()
		)
	
	
	if event.is_action_pressed(\"mouse_left\"):
		var obj : FieldObject = %FieldObjectMap.get_first_object_on_cell(%MouseCell.cell)
		
		if obj != null:
			if obj != %Chosen.object:
				%Chosen.choose(obj)
		elif %Chosen.object != null:
			if not %Chosen.chosen_correct_ability():
				return
			
			var action : Action = %Chosen.get_apply_ability_action(
				%MouseCell.cell
			)
			
			if action == null:
				return
			
			%ActionProcessor.put_action(action)


func _on_abilities_ability_started(ability, fo:FieldObject, target:Vector2i):
	print(\"%s Started\"%ability)
	
	if not %AbilityDrawRuleController.has_active_rule():
		return
	
	%AbilityDrawRuleController.draw_applying(fo, target)


func _on_abilities_ability_completed(ability):
	print(\"%s completed\"%ability)
	
	if not %AbilityDrawRuleController.has_active_rule():
		return
	
	%AbilityDrawRuleController.draw_waiting(%Chosen.object)


func _on_chosen_new_object():
	%AbilityDrawRuleController.clear_rule()
"

[sub_resource type="GDScript" id="GDScript_jvw1s"]
script/source = "extends CanvasLayer




func _on_chosen_new_object():
	$AbilityChoosingUI.clear_buttons()
	
	if not FieldObject.valid(%Chosen.object):
		return
	
	$AbilityChoosingUI.setup_for_object(%Chosen.object)


func _on_ability_choosing_ui_ability_button_pressed(ability_name):
	if not %Chosen.has_chosen():
		return
	
	if %Chosen.ability != ability_name:
		%Chosen.choose_ability(ability_name)
		
		%AbilityDrawRuleController.set_rule(ability_name, %Chosen.object)
"

[sub_resource type="GDScript" id="GDScript_jpt61"]
script/source = "extends Window

func _ready():
	$Base.set_current_action_as_text(
		%ActionProcessor.current
	)
	
	$Base.set_queue_as_text(
		%ActionProcessor.action_queue
	)


func _on_base_hand_mode_toggled(to):
	%ActionProcessor.handmode = to


func _on_base_push_queue_pressed():
	%ActionProcessor.push_queue_in_hand_mode()


func _on_action_processor_next_action_picked():
	$Base.set_current_action_as_text(
		%ActionProcessor.current
	)
	
	$Base.set_queue_as_text(
		%ActionProcessor.action_queue
	)


func _on_action_processor_current_completed():
	$Base.clear_current_action_text()


func _on_action_processor_action_added():
	$Base.set_queue_as_text(
		%ActionProcessor.action_queue
	)
"

[sub_resource type="GDScript" id="GDScript_8qbeo"]
script/source = "extends Window


func _ready():
	$base.clear_info()




func _on_chosen_new_ability():
	$base.set_info_for_ability(%Chosen.ability)


func _on_chosen_new_object():
	$base.set_info_for_object(%Chosen.object)


func _on_base_delete_chosen_pressed():
	if not %Chosen.has_chosen():
		return
	
	var obj : FieldObject = %Chosen.object
	
	%Chosen.unchoose()
	
	obj.queue_free()


func _on_base_unchoose_pressed():
	%Chosen.unchoose()
"

[node name="main" type="Node2D"]
script = SubResource("GDScript_qfrmm")

[node name="Chosen" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_rde56")

[node name="MouseCell" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_dgca5")

[node name="ActionProcessor" type="Node" parent="."]
unique_name_in_owner = true
script = ExtResource("1_ntvn1")

[node name="Abilities" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_8cm6s")

[node name="FieldObjectMap" type="Node" parent="."]
unique_name_in_owner = true
script = ExtResource("2_2rgc4")

[node name="AbilityDrawRuleController" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_wxxsl")

[node name="LinearMoveDrawRule" type="Node" parent="AbilityDrawRuleController"]
script = SubResource("GDScript_tat8k")

[node name="GameField" type="Node2D" parent="."]
unique_name_in_owner = true
position = Vector2(566, 80)
script = SubResource("GDScript_5k726")
map_size = 7
hex_size = 40
metadata/_edit_group_ = true

[node name="GridDraw" type="Node" parent="GameField"]
script = SubResource("GDScript_616kv")

[node name="MouseDraw" type="Node" parent="GameField"]
script = SubResource("GDScript_7mif4")

[node name="FieldObjectsEncircle" type="Node" parent="GameField"]
script = SubResource("GDScript_m5a4j")

[node name="ChosenEncircle" type="Node" parent="GameField"]
script = SubResource("GDScript_pklfo")

[node name="Inputs" type="Node" parent="."]
script = SubResource("GDScript_fkqau")

[node name="GUI" type="CanvasLayer" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_jvw1s")

[node name="AbilityChoosingUI" parent="GUI" instance=ExtResource("3_skgp4")]

[node name="ActionQueueControlPanel" type="Window" parent="."]
title = "Action queue "
position = Vector2i(50, 50)
size = Vector2i(600, 200)
min_size = Vector2i(600, 200)
script = SubResource("GDScript_jpt61")

[node name="Base" parent="ActionQueueControlPanel" instance=ExtResource("3_8vfj5")]

[node name="ChosenControlPanel" type="Window" parent="."]
position = Vector2i(60, 60)
size = Vector2i(500, 200)
min_size = Vector2i(500, 200)
script = SubResource("GDScript_8qbeo")

[node name="base" parent="ChosenControlPanel" instance=ExtResource("4_ukry5")]

[connection signal="new_ability" from="Chosen" to="ChosenControlPanel" method="_on_chosen_new_ability"]
[connection signal="new_object" from="Chosen" to="Inputs" method="_on_chosen_new_object"]
[connection signal="new_object" from="Chosen" to="GUI" method="_on_chosen_new_object"]
[connection signal="new_object" from="Chosen" to="ChosenControlPanel" method="_on_chosen_new_object"]
[connection signal="action_added" from="ActionProcessor" to="ActionQueueControlPanel" method="_on_action_processor_action_added"]
[connection signal="current_completed" from="ActionProcessor" to="ActionQueueControlPanel" method="_on_action_processor_current_completed"]
[connection signal="next_action_picked" from="ActionProcessor" to="ActionQueueControlPanel" method="_on_action_processor_next_action_picked"]
[connection signal="ability_completed" from="Abilities" to="Inputs" method="_on_abilities_ability_completed"]
[connection signal="ability_started" from="Abilities" to="Inputs" method="_on_abilities_ability_started"]
[connection signal="ability_button_pressed" from="GUI/AbilityChoosingUI" to="GUI" method="_on_ability_choosing_ui_ability_button_pressed"]
[connection signal="hand_mode_toggled" from="ActionQueueControlPanel/Base" to="ActionQueueControlPanel" method="_on_base_hand_mode_toggled"]
[connection signal="push_queue_pressed" from="ActionQueueControlPanel/Base" to="ActionQueueControlPanel" method="_on_base_push_queue_pressed"]
[connection signal="delete_chosen_pressed" from="ChosenControlPanel/base" to="ChosenControlPanel" method="_on_base_delete_chosen_pressed"]
[connection signal="unchoose_pressed" from="ChosenControlPanel/base" to="ChosenControlPanel" method="_on_base_unchoose_pressed"]
